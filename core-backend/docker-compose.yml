version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial_analyzer_postgres
    environment:
      POSTGRES_DB: financial_analyzer
      POSTGRES_USER: analyzer_user
      POSTGRES_PASSWORD: analyzer_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analyzer_user -d financial_analyzer"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - analyzer_network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: financial_analyzer_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - analyzer_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_analyzer_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://analyzer_user:analyzer_password@postgres:5432/financial_analyzer
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - SECRET_KEY=your-production-secret-key-change-this
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - analyzer_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: financial_analyzer_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - analyzer_network

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: financial_analyzer_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@financial-analyzer.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - admin

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: financial_analyzer_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - admin

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: financial_analyzer_celery_worker
    environment:
      - DATABASE_URL=postgresql://analyzer_user:analyzer_password@postgres:5432/financial_analyzer
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A app.tasks worker --loglevel=info
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - worker

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: financial_analyzer_celery_beat
    environment:
      - DATABASE_URL=postgresql://analyzer_user:analyzer_password@postgres:5432/financial_analyzer
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A app.tasks beat --loglevel=info
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - worker

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: financial_analyzer_flower
    environment:
      - DATABASE_URL=postgresql://analyzer_user:analyzer_password@postgres:5432/financial_analyzer
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "5555:5555"
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A app.tasks flower
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - monitoring

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_analyzer_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - monitoring

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: financial_analyzer_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - analyzer_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local

networks:
  analyzer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
